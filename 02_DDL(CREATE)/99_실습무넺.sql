--실습문제--
--도서관리 프로그램을 만들기 위한 테이블을 만들기
--이때, 제약조건에 이름을 부여할 것
-- 각 컬럼에 주석달기

--1. 출판사들에 대한 데이터를 담기 위한 출판사 테이블(TB_PUBLISHER)
--컬럼: PUB_NO(출판사번호) --기본키(PUBLISHER_PK)
-- PUB_NAME(출판사명) --NOT NULL(PUBLICHSER_NN)
-- PHONE(출판사전화번호) --제약조건 없음

CREATE TABLE TB_PUBLISHER(
    PUB_NO NUMBER CONSTRAINT PUBLISHER_PK PRIMARY KEY,
    PUB_NAME VARCHAR2(40) CONSTRAINT PUBLISHER_NN NOT NULL,
    PHONE VARCHAR2(20)
);

--3개 정도의 샘플 데이터 추가하기
SELECT * FROM TB_PUBLISHER;
INSERT INTO TB_PUBLISHER VALUES('1', '참좋은출판사', '02-1234-1234');
INSERT INTO TB_PUBLISHER VALUES('2', '나쁜출판사', '02-3333-3333');
INSERT INTO TB_PUBLISHER VALUES('3', '보통출판사', '02-8888-8888');



--2. 도서들에 대한 데이터를 담기 위한 도서 테이블(TB_BOOK)
--컬럼: BK_NO(도서번호) --기본키(BOOK_PK)
-- BK_TITLE(도서명) --NOT NULL(BOOK_NN_TITLE)
-- BK_AUTHOR(저자명) --NOT NULL(BOOK_NN_AUTHOR)
-- BK_PRICE(가격)
-- BK_STOCK(재고) --기본값 1로 지정
-- BK_PUB_NO(출판사번호) --외래키(BOOK_FK)(TB_PUBLISHER 테이블을 참조하도록)
-- 이때 참조하고 있는 부모데이터 삭제 시 자식데이터도 삭제되도록 설정

CREATE TABLE TB_BOOK(
    BK_NO NUMBER CONSTRAINT BOOK_PK PRIMARY KEY,
    BK_TITLE VARCHAR2(40) CONSTRAINT BOOK_NN_TITLE NOT NULL,
    BK_AUTHOR VARCHAR2(30) CONSTRAINT BOOK_NN_AUTHOR NOT NULL,
    BK_PRICE NUMBER,
    BK_STOCK NUMBER DEFAULT 1,
    BK_PUB_NO NUMBER REFERENCES TB_PUBLISHER ON DELETE CASCADE

);

DROP TABLE TB_BOOK;
--5개 정도의 샘플 데이터 추가하기
SELECT * FROM TB_BOOK;
INSERT INTO TB_BOOK VALUES('1','농구의 정석1', '마이클조던', 15000, DEFAULT, 1 );
INSERT INTO TB_BOOK VALUES('2','농구의 정석2', '마이클조던', 15000, DEFAULT, 2 );
INSERT INTO TB_BOOK VALUES('3','농구의 정석3', '마이클조던', 15000, DEFAULT, 2 );
INSERT INTO TB_BOOK VALUES('4','농구의 정석4', '서브커리', 15000, 20, 3 );
INSERT INTO TB_BOOK VALUES('5','농구의 정석5', '서브쿼리', 15000, 20, 3 );

DELETE FROM TB_PUBLISHER
WHERE PUB_NO =3;

ROLLBACK;

--3. 회원에 대한 데이터를 담기 위한 회원 테이블(TB_MEMBER)
--컬럼명: MEMBER_NO(회원번호) --기본키(MEMBER_PK)
--MEMBER_ID(아이디) --중복금지(MEMBER_UQ)
--MEMBER_PWD(비밀번호) NOT NULL(MEMBER_NN_PWD)
--MEMBER_NAME(회원명) NOT NULL(MEMBER_NN_NAME)
--GENDER(성별) 'M' 또는 'F'로 입력되도록 제한(MEMBER_CK_GEN)
--ADDRESS(주소)
--PHONE(연락처)
--STATUS(탈퇴여부) --기본값으로 'N' 그리고 'Y' 혹은 'N'으로 입력되도록 제약조건(MEMBER_CK_STA)
--ENROLL_DATE(가입일) --기본값으로 SYSDATE, NOT NULL 조건(MEMBER_NN_EN)

CREATE TABLE TB_MEMBER(
    MEMBER_NO NUMBER CONSTRAINT MEMBER_PK PRIMARY KEY,
    MEMBER_ID VARCHAR2(40) CONSTRAINT MEMBER_UQ UNIQUE,
    MEMBER_PWD VARCHAR2(30) CONSTRAINT MEMBER_NN_PWD NOT NULL,
    MEMBER_NAME VARCHAR2(40) CONSTRAINT MEMBER_NN_NAME NOT NULL,
    GENDER CHAR(3) CONSTRAINT MEMBER_CK_GEN CHECK(GENDER IN ('M','F')), 
    ADDRESS VARCHAR(50),
    PHONE VARCHAR(13),
    STATUS CHAR(3) DEFAULT 'N' CONSTRAINT MEMBER_CK_STA CHECK(STATUS IN ('Y','N')),
    ENROLL_DATE DATE DEFAULT SYSDATE CONSTRAINT MEMEBER_NN_EN NOT NULL
);


--5개 정도의 샘플 데이터 추가하기
SELECT * FROM TB_MEMBER;
INSERT INTO TB_MEMBER VALUES('1001', 'user01','pwd01','사람1','M','강남', null, default, default);
INSERT INTO TB_MEMBER VALUES('1002', 'user02','pwd02','김이찬','M','수원', null, default, '25/02/11');
INSERT INTO TB_MEMBER VALUES('1003', 'user03','pwd03','사람3','F','당산', null, default, '25/01/01');
INSERT INTO TB_MEMBER VALUES('1004', 'user04','pwd04','사람4','F','홍대', null, default, '25/04/30');
INSERT INTO TB_MEMBER VALUES('1005', 'user05','pwd05','사람5','F','사당', null, default, '25/06/06');

DELETE FROM TB_MEMBER
WHERE MEMBER_NO =1002;

--4. 도서를 대여한 회원에 대한 데이터를 담기 위한 대여목록 테이블(TB_RENT)
--컬럼:
--RENT_NO(대여번호) --기본키(RENT_PK)
--RENT_MEM_NO(대여회원번호) --외래키(RENT_FK_MEM) TB_MEMBER와 참조하도록
--이때 부모데이터 삭제 시 NULL값이 되도록 옵션 설정
--RENT_BOOK_NO(대여도서번호) --외래키(RENT_FK_BOOK) TB_BOOK와 참조하도록
--이때 부모데이터 삭제 시 NULL값이 되도록 옵션설정
--RENT_DATE(대여일) --기본값 SYSDATE
CREATE TABLE TB_RENT(
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY,
    RENT_MEM_NO NUMBER REFERENCES TB_MEMBER(MEMBER_NO) ON DELETE CASCADE,
    RENT_BOOK_NO NUMBER REFERENCES TB_BOOK(BK_NO) ON DELETE SET NULL,
    RENT_DATE DATE DEFAULT SYSDATE
);

--샘플데이터 3개정도 추가하기
SELECT * FROM TB_RENT;
INSERT INTO TB_RENT VALUES(1, 1001, 1, SYSDATE);
INSERT INTO TB_RENT VALUES(2, 1002, 2, '25/05/05');
INSERT INTO TB_RENT VALUES(3, 1003, 3, '25/03/15');


--2번 도서를 대여한 회원의 이름, 아이디, 대여일, 반납예정일(대여일+7)을 조회하시오.
SELECT MEMBER_NAME AS 이름 , MEMBER_ID AS 아이디, RENT_DATE AS 대여일, (RENT_DATE+7) AS 반납예정일
FROM TB_RENT
JOIN TB_PUBLISHER ON (RENT_NO = PUB_NO )
JOIN TB_MEMBER ON (RENT_MEM_NO = MEMBER_NO)
JOIN TB_BOOK ON ( RENT_BOOK_NO = BK_NO )
WHERE BK_NO= 2; 

